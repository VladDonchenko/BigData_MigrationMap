{"ast":null,"code":"var _jsxFileName = \"/home/vlad/Migratio_Map/frontend/src/components/MigrationMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, Paper, ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, Tooltip as LeafletTooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport { useNavigate } from 'react-router-dom';\n\n// Исправление проблемы с иконками маркеров в Leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst MigrationMap = () => {\n  _s();\n  const [selectedCity, setSelectedCity] = useState(null);\n  const [visualizationType, setVisualizationType] = useState('cities');\n  const [migrationFlows, setMigrationFlows] = useState([]);\n  const [cities, setCities] = useState([]);\n  const navigate = useNavigate();\n\n  // Загрузка городов\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('/api/v1/cities');\n        if (!response.ok) {\n          throw new Error('Помилка завантаження міст');\n        }\n        const data = await response.json();\n        setCities(data);\n      } catch (error) {\n        console.error('Помилка:', error);\n      }\n    };\n    fetchCities();\n  }, []);\n\n  // Загрузка потоков миграции\n  useEffect(() => {\n    const fetchMigrationFlows = async () => {\n      try {\n        const response = await fetch('/api/v1/migration/flows');\n        if (!response.ok) {\n          throw new Error('Помилка завантаження потоків міграції');\n        }\n        const data = await response.json();\n        setMigrationFlows(data);\n      } catch (error) {\n        console.error('Помилка:', error);\n      }\n    };\n    fetchMigrationFlows();\n  }, []);\n\n  // Центр карты - Украина\n  const center = [48.3794, 31.1656];\n\n  // Обработчик изменения типа визуализации\n  const handleVisualizationChange = (event, newVisualization) => {\n    if (newVisualization !== null) {\n      setVisualizationType(newVisualization);\n    }\n  };\n\n  // Получение цвета маркера в зависимости от населения\n  const getMarkerColor = population => {\n    if (population > 1000000) return '#ff0000'; // Красный для больших городов\n    if (population > 500000) return '#ff7f00'; // Оранжевый для средних городов\n    if (population > 100000) return '#ffff00'; // Желтый для малых городов\n    return '#00ff00'; // Зеленый для очень малых городов\n  };\n\n  // Получение размера маркера в зависимости от населения\n  const getMarkerSize = population => {\n    return Math.log10(population) * 5;\n  };\n\n  // Получение цвета линии в зависимости от количества мигрантов\n  const getFlowColor = count => {\n    if (count > 1000) return '#ff0000';\n    if (count > 500) return '#ff7f00';\n    if (count > 100) return '#ffff00';\n    return '#00ff00';\n  };\n\n  // Получение толщины линии в зависимости от количества мигрантов\n  const getFlowWeight = count => {\n    return Math.log10(count) * 2;\n  };\n\n  // Получение координат города по его имени\n  const getCityCoordinates = cityName => {\n    const city = cities.find(c => c.name === cityName);\n    return city ? [city.latitude, city.longitude] : null;\n  };\n  const handleFlowClick = (fromCity, toCity) => {\n    const encodedFromCity = encodeURIComponent(fromCity);\n    const encodedToCity = encodeURIComponent(toCity);\n    navigate(`/flow/${encodedFromCity}/${encodedToCity}`);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: \"\\u041A\\u0430\\u0440\\u0442\\u0430 \\u043C\\u0456\\u0433\\u0440\\u0430\\u0446\\u0456\\u0457\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n        value: visualizationType,\n        exclusive: true,\n        onChange: handleVisualizationChange,\n        \"aria-label\": \"\\u0442\\u0438\\u043F \\u0432\\u0456\\u0437\\u0443\\u0430\\u043B\\u0456\\u0437\\u0430\\u0446\\u0456\\u0457\",\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"cities\",\n          \"aria-label\": \"\\u043C\\u0456\\u0441\\u0442\\u0430\",\n          children: \"\\u041C\\u0456\\u0441\\u0442\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"flows\",\n          \"aria-label\": \"\\u043F\\u043E\\u0442\\u043E\\u043A\\u0438\",\n          children: \"\\u041F\\u043E\\u0442\\u043E\\u043A\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        height: '600px',\n        overflow: 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(MapContainer, {\n        center: center,\n        zoom: 6,\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n          url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n          attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), cities.map(city => /*#__PURE__*/_jsxDEV(Marker, {\n          position: [city.latitude, city.longitude],\n          eventHandlers: {\n            click: () => setSelectedCity(city.name)\n          },\n          icon: L.divIcon({\n            className: 'custom-marker',\n            html: `<div style=\"\n                  background-color: ${getMarkerColor(city.population)};\n                  width: ${getMarkerSize(city.population)}px;\n                  height: ${getMarkerSize(city.population)}px;\n                  border-radius: 50%;\n                  border: 2px solid white;\n                  box-shadow: 0 0 10px rgba(0,0,0,0.5);\n                \"></div>`,\n            iconSize: [getMarkerSize(city.population), getMarkerSize(city.population)],\n            iconAnchor: [getMarkerSize(city.population) / 2, getMarkerSize(city.population) / 2]\n          }),\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: city.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"\\u0420\\u0435\\u0433\\u0456\\u043E\\u043D: \", city.region]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"\\u041D\\u0430\\u0441\\u0435\\u043B\\u0435\\u043D\\u043D\\u044F: \", city.population.toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)\n        }, city.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this)), visualizationType === 'flows' && migrationFlows.map((flow, index) => {\n          const fromCoords = getCityCoordinates(flow.fromCity);\n          const toCoords = getCityCoordinates(flow.toCity);\n          if (!fromCoords || !toCoords) return null;\n          return /*#__PURE__*/_jsxDEV(Polyline, {\n            positions: [fromCoords, toCoords],\n            pathOptions: {\n              color: getFlowColor(flow.count),\n              weight: getFlowWeight(flow.count),\n              opacity: 0.6\n            },\n            eventHandlers: {\n              click: () => handleFlowClick(flow.fromCity, flow.toCity)\n            },\n            children: /*#__PURE__*/_jsxDEV(LeafletTooltip, {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"subtitle2\",\n                  children: \"\\u041C\\u0456\\u0433\\u0440\\u0430\\u0446\\u0456\\u0439\\u043D\\u0438\\u0439 \\u043F\\u043E\\u0442\\u0456\\u043A\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 211,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"\\u0417: \", flow.fromCity]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"\\u0414\\u043E: \", flow.toCity]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"\\u041A\\u0456\\u043B\\u044C\\u043A\\u0456\\u0441\\u0442\\u044C: \", flow.count]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"\\u0421\\u0435\\u0440\\u0435\\u0434\\u043D\\u0456\\u0439 \\u0432\\u0456\\u043A: \", flow.avg_age ? flow.avg_age.toFixed(1) : 'Н/Д']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 215,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"\\u0421\\u0435\\u0440\\u0435\\u0434\\u043D\\u044F \\u0432\\u0456\\u0434\\u0441\\u0442\\u0430\\u043D\\u044C: \", flow.distance.toFixed(1), \" \\u043A\\u043C\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [\"\\u041F\\u0440\\u0438\\u0447\\u0438\\u043D\\u0438: \", flow.reasons ? flow.reasons.join(', ') : 'Н/Д']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)\n          }, `${flow.fromCity}-${flow.toCity}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(MigrationMap, \"J/Qbn88hYsvzoep8uh8+8ef3XF8=\", false, function () {\n  return [useNavigate];\n});\n_c = MigrationMap;\nexport default MigrationMap;\nvar _c;\n$RefreshReg$(_c, \"MigrationMap\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","Paper","ToggleButtonGroup","ToggleButton","MapContainer","TileLayer","Marker","Popup","Polyline","Tooltip","LeafletTooltip","L","useNavigate","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","MigrationMap","_s","selectedCity","setSelectedCity","visualizationType","setVisualizationType","migrationFlows","setMigrationFlows","cities","setCities","navigate","fetchCities","response","fetch","ok","Error","data","json","error","console","fetchMigrationFlows","center","handleVisualizationChange","event","newVisualization","getMarkerColor","population","getMarkerSize","Math","log10","getFlowColor","count","getFlowWeight","getCityCoordinates","cityName","city","find","c","name","latitude","longitude","handleFlowClick","fromCity","toCity","encodedFromCity","encodeURIComponent","encodedToCity","children","sx","display","justifyContent","alignItems","mb","variant","fileName","_jsxFileName","lineNumber","columnNumber","value","exclusive","onChange","height","overflow","zoom","style","width","url","attribution","map","position","eventHandlers","click","icon","divIcon","className","html","iconSize","iconAnchor","region","toLocaleString","flow","index","fromCoords","toCoords","positions","pathOptions","color","weight","opacity","avg_age","toFixed","distance","reasons","join","_c","$RefreshReg$"],"sources":["/home/vlad/Migratio_Map/frontend/src/components/MigrationMap.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Box, Typography, Paper, ToggleButtonGroup, ToggleButton } from '@mui/material';\nimport { MapContainer, TileLayer, Marker, Popup, Polyline, Tooltip as LeafletTooltip } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport L from 'leaflet';\nimport { useNavigate } from 'react-router-dom';\n\n// Исправление проблемы с иконками маркеров в Leaflet\ndelete (L.Icon.Default.prototype as any)._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\ninterface City {\n  name: string;\n  region: string;\n  latitude: number;\n  longitude: number;\n  population: number;\n}\n\ninterface MigrationFlow {\n  fromCity: string;\n  toCity: string;\n  count: number;\n  avg_age: number;\n  reasons: string[];\n  distance: number;\n}\n\ninterface MigrationMapProps {}\n\nconst MigrationMap: React.FC<MigrationMapProps> = () => {\n  const [selectedCity, setSelectedCity] = useState<string | null>(null);\n  const [visualizationType, setVisualizationType] = useState<'cities' | 'flows'>('cities');\n  const [migrationFlows, setMigrationFlows] = useState<MigrationFlow[]>([]);\n  const [cities, setCities] = useState<City[]>([]);\n  const navigate = useNavigate();\n\n  // Загрузка городов\n  useEffect(() => {\n    const fetchCities = async () => {\n      try {\n        const response = await fetch('/api/v1/cities');\n        if (!response.ok) {\n          throw new Error('Помилка завантаження міст');\n        }\n        const data = await response.json();\n        setCities(data);\n      } catch (error) {\n        console.error('Помилка:', error);\n      }\n    };\n\n    fetchCities();\n  }, []);\n\n  // Загрузка потоков миграции\n  useEffect(() => {\n    const fetchMigrationFlows = async () => {\n      try {\n        const response = await fetch('/api/v1/migration/flows');\n        if (!response.ok) {\n          throw new Error('Помилка завантаження потоків міграції');\n        }\n        const data = await response.json();\n        setMigrationFlows(data);\n      } catch (error) {\n        console.error('Помилка:', error);\n      }\n    };\n\n    fetchMigrationFlows();\n  }, []);\n\n  // Центр карты - Украина\n  const center: [number, number] = [48.3794, 31.1656];\n\n  // Обработчик изменения типа визуализации\n  const handleVisualizationChange = (\n    event: React.MouseEvent<HTMLElement>,\n    newVisualization: 'cities' | 'flows' | null,\n  ) => {\n    if (newVisualization !== null) {\n      setVisualizationType(newVisualization);\n    }\n  };\n\n  // Получение цвета маркера в зависимости от населения\n  const getMarkerColor = (population: number): string => {\n    if (population > 1000000) return '#ff0000'; // Красный для больших городов\n    if (population > 500000) return '#ff7f00'; // Оранжевый для средних городов\n    if (population > 100000) return '#ffff00'; // Желтый для малых городов\n    return '#00ff00'; // Зеленый для очень малых городов\n  };\n\n  // Получение размера маркера в зависимости от населения\n  const getMarkerSize = (population: number): number => {\n    return Math.log10(population) * 5;\n  };\n\n  // Получение цвета линии в зависимости от количества мигрантов\n  const getFlowColor = (count: number): string => {\n    if (count > 1000) return '#ff0000';\n    if (count > 500) return '#ff7f00';\n    if (count > 100) return '#ffff00';\n    return '#00ff00';\n  };\n\n  // Получение толщины линии в зависимости от количества мигрантов\n  const getFlowWeight = (count: number): number => {\n    return Math.log10(count) * 2;\n  };\n\n  // Получение координат города по его имени\n  const getCityCoordinates = (cityName: string): [number, number] | null => {\n    const city = cities.find(c => c.name === cityName);\n    return city ? [city.latitude, city.longitude] : null;\n  };\n\n  const handleFlowClick = (fromCity: string, toCity: string) => {\n    const encodedFromCity = encodeURIComponent(fromCity);\n    const encodedToCity = encodeURIComponent(toCity);\n    navigate(`/flow/${encodedFromCity}/${encodedToCity}`);\n  };\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Typography variant=\"h5\">\n          Карта міграції\n        </Typography>\n        <ToggleButtonGroup\n          value={visualizationType}\n          exclusive\n          onChange={handleVisualizationChange}\n          aria-label=\"тип візуалізації\"\n        >\n          <ToggleButton value=\"cities\" aria-label=\"міста\">\n            Міста\n          </ToggleButton>\n          <ToggleButton value=\"flows\" aria-label=\"потоки\">\n            Потоки\n          </ToggleButton>\n        </ToggleButtonGroup>\n      </Box>\n      \n      <Paper sx={{ height: '600px', overflow: 'hidden' }}>\n        <MapContainer \n          center={center} \n          zoom={6} \n          style={{ height: '100%', width: '100%' }}\n        >\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          />\n          \n          {cities.map((city) => (\n            <Marker\n              key={city.name}\n              position={[city.latitude, city.longitude]}\n              eventHandlers={{\n                click: () => setSelectedCity(city.name),\n              }}\n              icon={L.divIcon({\n                className: 'custom-marker',\n                html: `<div style=\"\n                  background-color: ${getMarkerColor(city.population)};\n                  width: ${getMarkerSize(city.population)}px;\n                  height: ${getMarkerSize(city.population)}px;\n                  border-radius: 50%;\n                  border: 2px solid white;\n                  box-shadow: 0 0 10px rgba(0,0,0,0.5);\n                \"></div>`,\n                iconSize: [getMarkerSize(city.population), getMarkerSize(city.population)],\n                iconAnchor: [getMarkerSize(city.population) / 2, getMarkerSize(city.population) / 2],\n              })}\n            >\n              <Popup>\n                <Typography variant=\"h6\">{city.name}</Typography>\n                <Typography>Регіон: {city.region}</Typography>\n                <Typography>Населення: {city.population.toLocaleString()}</Typography>\n              </Popup>\n            </Marker>\n          ))}\n          \n          {visualizationType === 'flows' && migrationFlows.map((flow, index) => {\n            const fromCoords = getCityCoordinates(flow.fromCity);\n            const toCoords = getCityCoordinates(flow.toCity);\n            \n            if (!fromCoords || !toCoords) return null;\n            \n            return (\n              <Polyline\n                key={`${flow.fromCity}-${flow.toCity}-${index}`}\n                positions={[fromCoords, toCoords]}\n                pathOptions={{\n                  color: getFlowColor(flow.count),\n                  weight: getFlowWeight(flow.count),\n                  opacity: 0.6\n                }}\n                eventHandlers={{\n                  click: () => handleFlowClick(flow.fromCity, flow.toCity)\n                }}\n              >\n                <LeafletTooltip>\n                  <div>\n                    <Typography variant=\"subtitle2\">Міграційний потік</Typography>\n                    <Typography>З: {flow.fromCity}</Typography>\n                    <Typography>До: {flow.toCity}</Typography>\n                    <Typography>Кількість: {flow.count}</Typography>\n                    <Typography>Середній вік: {flow.avg_age ? flow.avg_age.toFixed(1) : 'Н/Д'}</Typography>\n                    <Typography>Середня відстань: {flow.distance.toFixed(1)} км</Typography>\n                    <Typography>Причини: {flow.reasons ? flow.reasons.join(', ') : 'Н/Д'}</Typography>\n                  </div>\n                </LeafletTooltip>\n              </Polyline>\n            );\n          })}\n        </MapContainer>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default MigrationMap; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}