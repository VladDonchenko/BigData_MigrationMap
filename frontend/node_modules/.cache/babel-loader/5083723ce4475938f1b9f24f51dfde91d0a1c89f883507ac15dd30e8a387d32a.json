{"ast":null,"code":"var _jsxFileName = \"/home/vlad/Migratio_Map/frontend/src/components/Map.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  cities,\n  migrationFlows,\n  selectedCity,\n  onCitySelect\n}) => {\n  _s();\n  const [center, setCenter] = useState([48.379433, 31.165581]); // Центр України\n\n  useEffect(() => {\n    if (selectedCity) {\n      const city = cities.find(c => c.name === selectedCity);\n      if (city) {\n        setCenter([city.lat, city.lng]);\n      }\n    }\n  }, [selectedCity, cities]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: center,\n    zoom: 7,\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), cities.map(city => /*#__PURE__*/_jsxDEV(CircleMarker, {\n      center: [city.lat, city.lng],\n      radius: Math.log(city.population) * 2,\n      fillColor: selectedCity === city.name ? '#ff4444' : '#3388ff',\n      color: \"#fff\",\n      weight: 2,\n      eventHandlers: {\n        click: () => onCitySelect(city.name)\n      },\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: city.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u041D\\u0430\\u0441\\u0435\\u043B\\u0435\\u043D\\u043D\\u044F: \", city.population.toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u041E\\u0431\\u043B\\u0430\\u0441\\u0442\\u044C: \", city.region]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)\n    }, city.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(Map, \"BZbAj/5lNBT2yPxbofO0BtVGso0=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["useEffect","useState","MapContainer","TileLayer","CircleMarker","Popup","jsxDEV","_jsxDEV","Map","cities","migrationFlows","selectedCity","onCitySelect","_s","center","setCenter","city","find","c","name","lat","lng","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","radius","Math","log","population","fillColor","color","weight","eventHandlers","click","toLocaleString","region","_c","$RefreshReg$"],"sources":["/home/vlad/Migratio_Map/frontend/src/components/Map.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, CircleMarker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport { City, MigrationFlow } from '../types';\n\ninterface MapProps {\n    cities: City[];\n    migrationFlows: MigrationFlow[];\n    selectedCity?: string;\n    onCitySelect: (cityName: string) => void;\n}\n\nconst Map = ({ cities, migrationFlows, selectedCity, onCitySelect }: MapProps) => {\n    const [center, setCenter] = useState([48.379433, 31.165581]); // Центр України\n\n    useEffect(() => {\n        if (selectedCity) {\n            const city = cities.find(c => c.name === selectedCity);\n            if (city) {\n                setCenter([city.lat, city.lng]);\n            }\n        }\n    }, [selectedCity, cities]);\n\n    return (\n        <MapContainer\n            center={center}\n            zoom={7}\n            style={{ height: '100vh', width: '100%' }}\n        >\n            <TileLayer\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            />\n            \n            {cities.map(city => (\n                <CircleMarker\n                    key={city.name}\n                    center={[city.lat, city.lng]}\n                    radius={Math.log(city.population) * 2}\n                    fillColor={selectedCity === city.name ? '#ff4444' : '#3388ff'}\n                    color=\"#fff\"\n                    weight={2}\n                    eventHandlers={{\n                        click: () => onCitySelect(city.name)\n                    }}\n                >\n                    <Popup>\n                        <div>\n                            <h3>{city.name}</h3>\n                            <p>Населення: {city.population.toLocaleString()}</p>\n                            <p>Область: {city.region}</p>\n                        </div>\n                    </Popup>\n                </CircleMarker>\n            ))}\n        </MapContainer>\n    );\n};\n\nexport default Map; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}