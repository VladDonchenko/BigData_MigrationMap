{"ast":null,"code":"var _jsxFileName = \"/home/vlad/Migratio_Map/frontend/src/components/MigrationMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { MapContainer, TileLayer, Circle, Popup, Polyline } from 'react-leaflet';\nimport { ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport 'leaflet/dist/leaflet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MigrationMap = ({\n  cities,\n  migrationFlows\n}) => {\n  _s();\n  const [visualizationType, setVisualizationType] = useState('flow');\n  const [center] = useState([55.7558, 37.6173]); // Москва\n\n  const getFlowColor = migrantsCount => {\n    if (migrantsCount > 1000) return '#ff0000';\n    if (migrantsCount > 500) return '#ff7f00';\n    if (migrantsCount > 100) return '#ffff00';\n    return '#00ff00';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: 10,\n        right: 10,\n        zIndex: 1000\n      },\n      children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n        value: visualizationType,\n        exclusive: true,\n        onChange: (_, newValue) => newValue && setVisualizationType(newValue),\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"heatmap\",\n          children: \"\\u0422\\u0435\\u043F\\u043B\\u043E\\u0432\\u0430\\u044F \\u043A\\u0430\\u0440\\u0442\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n          value: \"flow\",\n          children: \"\\u041F\\u043E\\u0442\\u043E\\u043A\\u0438 \\u043C\\u0438\\u0433\\u0440\\u0430\\u0446\\u0438\\u0438\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: center,\n      zoom: 5,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), cities.map(city => /*#__PURE__*/_jsxDEV(Circle, {\n        center: [city.latitude, city.longitude],\n        radius: Math.log(city.population) * 1000,\n        fillColor: \"#3388ff\",\n        color: \"#3388ff\",\n        weight: 2,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: city.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u041D\\u0430\\u0441\\u0435\\u043B\\u0435\\u043D\\u0438\\u0435: \", city.population.toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u0420\\u0435\\u0433\\u0438\\u043E\\u043D: \", city.region]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, city.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)), visualizationType === 'flow' && migrationFlows.map(flow => /*#__PURE__*/_jsxDEV(Polyline, {\n        positions: [[flow.fromCity.latitude, flow.fromCity.longitude], [flow.toCity.latitude, flow.toCity.longitude]],\n        color: getFlowColor(flow.migrantsCount),\n        weight: Math.log(flow.migrantsCount) * 2,\n        opacity: 0.6,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\u041C\\u0438\\u0433\\u0440\\u0430\\u0446\\u0438\\u043E\\u043D\\u043D\\u044B\\u0439 \\u043F\\u043E\\u0442\\u043E\\u043A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u0418\\u0437: \", flow.fromCity.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u0412: \", flow.toCity.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u041A\\u043E\\u043B\\u0438\\u0447\\u0435\\u0441\\u0442\\u0432\\u043E \\u043C\\u0438\\u0433\\u0440\\u0430\\u043D\\u0442\\u043E\\u0432: \", flow.migrantsCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u0421\\u0440\\u0435\\u0434\\u043D\\u0438\\u0439 \\u0432\\u043E\\u0437\\u0440\\u0430\\u0441\\u0442: \", flow.averageAge]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u041F\\u0440\\u0438\\u0447\\u0438\\u043D\\u044B: \", flow.reasons.join(', ')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)\n      }, flow.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(MigrationMap, \"3Q8tLT2xb86Uth7QT8427MsXLGo=\");\n_c = MigrationMap;\nexport default MigrationMap;\nvar _c;\n$RefreshReg$(_c, \"MigrationMap\");","map":{"version":3,"names":["React","useState","MapContainer","TileLayer","Circle","Popup","Polyline","ToggleButton","ToggleButtonGroup","jsxDEV","_jsxDEV","MigrationMap","cities","migrationFlows","_s","visualizationType","setVisualizationType","center","getFlowColor","migrantsCount","style","height","width","position","children","top","right","zIndex","value","exclusive","onChange","_","newValue","fileName","_jsxFileName","lineNumber","columnNumber","zoom","url","attribution","map","city","latitude","longitude","radius","Math","log","population","fillColor","color","weight","name","toLocaleString","region","id","flow","positions","fromCity","toCity","opacity","averageAge","reasons","join","_c","$RefreshReg$"],"sources":["/home/vlad/Migratio_Map/frontend/src/components/MigrationMap.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { MapContainer, TileLayer, Circle, Popup, Polyline } from 'react-leaflet';\nimport { ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport 'leaflet/dist/leaflet.css';\n\ninterface City {\n  id: number;\n  name: string;\n  latitude: number;\n  longitude: number;\n  population: number;\n  region: string;\n}\n\ninterface MigrationFlow {\n  id: number;\n  fromCity: City;\n  toCity: City;\n  migrantsCount: number;\n  averageAge: number;\n  reasons: string[];\n}\n\ninterface MigrationMapProps {\n  cities: City[];\n  migrationFlows: MigrationFlow[];\n}\n\nconst MigrationMap: React.FC<MigrationMapProps> = ({ cities, migrationFlows }) => {\n  const [visualizationType, setVisualizationType] = useState<'heatmap' | 'flow'>('flow');\n  const [center] = useState<[number, number]>([55.7558, 37.6173]); // Москва\n\n  const getFlowColor = (migrantsCount: number): string => {\n    if (migrantsCount > 1000) return '#ff0000';\n    if (migrantsCount > 500) return '#ff7f00';\n    if (migrantsCount > 100) return '#ffff00';\n    return '#00ff00';\n  };\n\n  return (\n    <div style={{ height: '100vh', width: '100%', position: 'relative' }}>\n      <div style={{ position: 'absolute', top: 10, right: 10, zIndex: 1000 }}>\n        <ToggleButtonGroup\n          value={visualizationType}\n          exclusive\n          onChange={(_, newValue) => newValue && setVisualizationType(newValue)}\n        >\n          <ToggleButton value=\"heatmap\">Тепловая карта</ToggleButton>\n          <ToggleButton value=\"flow\">Потоки миграции</ToggleButton>\n        </ToggleButtonGroup>\n      </div>\n\n      <MapContainer\n        center={center}\n        zoom={5}\n        style={{ height: '100%', width: '100%' }}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n        />\n\n        {cities.map((city) => (\n          <Circle\n            key={city.id}\n            center={[city.latitude, city.longitude]}\n            radius={Math.log(city.population) * 1000}\n            fillColor=\"#3388ff\"\n            color=\"#3388ff\"\n            weight={2}\n          >\n            <Popup>\n              <div>\n                <h3>{city.name}</h3>\n                <p>Население: {city.population.toLocaleString()}</p>\n                <p>Регион: {city.region}</p>\n              </div>\n            </Popup>\n          </Circle>\n        ))}\n\n        {visualizationType === 'flow' &&\n          migrationFlows.map((flow) => (\n            <Polyline\n              key={flow.id}\n              positions={[\n                [flow.fromCity.latitude, flow.fromCity.longitude],\n                [flow.toCity.latitude, flow.toCity.longitude],\n              ]}\n              color={getFlowColor(flow.migrantsCount)}\n              weight={Math.log(flow.migrantsCount) * 2}\n              opacity={0.6}\n            >\n              <Popup>\n                <div>\n                  <h3>Миграционный поток</h3>\n                  <p>Из: {flow.fromCity.name}</p>\n                  <p>В: {flow.toCity.name}</p>\n                  <p>Количество мигрантов: {flow.migrantsCount}</p>\n                  <p>Средний возраст: {flow.averageAge}</p>\n                  <p>Причины: {flow.reasons.join(', ')}</p>\n                </div>\n              </Popup>\n            </Polyline>\n          ))}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default MigrationMap; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,YAAY,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAChF,SAASC,YAAY,EAAEC,iBAAiB,QAAQ,eAAe;AAC/D,OAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAyBlC,MAAMC,YAAyC,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAqB,MAAM,CAAC;EACtF,MAAM,CAACgB,MAAM,CAAC,GAAGhB,QAAQ,CAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEjE,MAAMiB,YAAY,GAAIC,aAAqB,IAAa;IACtD,IAAIA,aAAa,GAAG,IAAI,EAAE,OAAO,SAAS;IAC1C,IAAIA,aAAa,GAAG,GAAG,EAAE,OAAO,SAAS;IACzC,IAAIA,aAAa,GAAG,GAAG,EAAE,OAAO,SAAS;IACzC,OAAO,SAAS;EAClB,CAAC;EAED,oBACET,OAAA;IAAKU,KAAK,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAW,CAAE;IAAAC,QAAA,gBACnEd,OAAA;MAAKU,KAAK,EAAE;QAAEG,QAAQ,EAAE,UAAU;QAAEE,GAAG,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAK,CAAE;MAAAH,QAAA,eACrEd,OAAA,CAACF,iBAAiB;QAChBoB,KAAK,EAAEb,iBAAkB;QACzBc,SAAS;QACTC,QAAQ,EAAEA,CAACC,CAAC,EAAEC,QAAQ,KAAKA,QAAQ,IAAIhB,oBAAoB,CAACgB,QAAQ,CAAE;QAAAR,QAAA,gBAEtEd,OAAA,CAACH,YAAY;UAACqB,KAAK,EAAC,SAAS;UAAAJ,QAAA,EAAC;QAAc;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC,eAC3D1B,OAAA,CAACH,YAAY;UAACqB,KAAK,EAAC,MAAM;UAAAJ,QAAA,EAAC;QAAe;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAc,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC,eAEN1B,OAAA,CAACR,YAAY;MACXe,MAAM,EAAEA,MAAO;MACfoB,IAAI,EAAE,CAAE;MACRjB,KAAK,EAAE;QAAEC,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAE,QAAA,gBAEzCd,OAAA,CAACP,SAAS;QACRmC,GAAG,EAAC,oDAAoD;QACxDC,WAAW,EAAC;MAAyF;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtG,CAAC,EAEDxB,MAAM,CAAC4B,GAAG,CAAEC,IAAI,iBACf/B,OAAA,CAACN,MAAM;QAELa,MAAM,EAAE,CAACwB,IAAI,CAACC,QAAQ,EAAED,IAAI,CAACE,SAAS,CAAE;QACxCC,MAAM,EAAEC,IAAI,CAACC,GAAG,CAACL,IAAI,CAACM,UAAU,CAAC,GAAG,IAAK;QACzCC,SAAS,EAAC,SAAS;QACnBC,KAAK,EAAC,SAAS;QACfC,MAAM,EAAE,CAAE;QAAA1B,QAAA,eAEVd,OAAA,CAACL,KAAK;UAAAmB,QAAA,eACJd,OAAA;YAAAc,QAAA,gBACEd,OAAA;cAAAc,QAAA,EAAKiB,IAAI,CAACU;YAAI;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eACpB1B,OAAA;cAAAc,QAAA,GAAG,0DAAW,EAACiB,IAAI,CAACM,UAAU,CAACK,cAAc,CAAC,CAAC;YAAA;cAAAnB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACpD1B,OAAA;cAAAc,QAAA,GAAG,wCAAQ,EAACiB,IAAI,CAACY,MAAM;YAAA;cAAApB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC,GAbHK,IAAI,CAACa,EAAE;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcN,CACT,CAAC,EAEDrB,iBAAiB,KAAK,MAAM,IAC3BF,cAAc,CAAC2B,GAAG,CAAEe,IAAI,iBACtB7C,OAAA,CAACJ,QAAQ;QAEPkD,SAAS,EAAE,CACT,CAACD,IAAI,CAACE,QAAQ,CAACf,QAAQ,EAAEa,IAAI,CAACE,QAAQ,CAACd,SAAS,CAAC,EACjD,CAACY,IAAI,CAACG,MAAM,CAAChB,QAAQ,EAAEa,IAAI,CAACG,MAAM,CAACf,SAAS,CAAC,CAC7C;QACFM,KAAK,EAAE/B,YAAY,CAACqC,IAAI,CAACpC,aAAa,CAAE;QACxC+B,MAAM,EAAEL,IAAI,CAACC,GAAG,CAACS,IAAI,CAACpC,aAAa,CAAC,GAAG,CAAE;QACzCwC,OAAO,EAAE,GAAI;QAAAnC,QAAA,eAEbd,OAAA,CAACL,KAAK;UAAAmB,QAAA,eACJd,OAAA;YAAAc,QAAA,gBACEd,OAAA;cAAAc,QAAA,EAAI;YAAkB;cAAAS,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3B1B,OAAA;cAAAc,QAAA,GAAG,gBAAI,EAAC+B,IAAI,CAACE,QAAQ,CAACN,IAAI;YAAA;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC/B1B,OAAA;cAAAc,QAAA,GAAG,UAAG,EAAC+B,IAAI,CAACG,MAAM,CAACP,IAAI;YAAA;cAAAlB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5B1B,OAAA;cAAAc,QAAA,GAAG,uHAAsB,EAAC+B,IAAI,CAACpC,aAAa;YAAA;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjD1B,OAAA;cAAAc,QAAA,GAAG,yFAAiB,EAAC+B,IAAI,CAACK,UAAU;YAAA;cAAA3B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzC1B,OAAA;cAAAc,QAAA,GAAG,8CAAS,EAAC+B,IAAI,CAACM,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC;YAAA;cAAA7B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD;MAAC,GAlBHmB,IAAI,CAACD,EAAE;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAmBJ,CACX,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV,CAAC;AAACtB,EAAA,CAhFIH,YAAyC;AAAAoD,EAAA,GAAzCpD,YAAyC;AAkF/C,eAAeA,YAAY;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}